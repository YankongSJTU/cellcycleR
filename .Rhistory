library(devtools)
install_github('kkdey/cellcycleR')
library(cellcycleR)
G <- 500;
num_cells <- 400;
amp_genes <- rep(10, G);
phi_genes <- runif(G, 0, 2*pi)
sigma_genes <- rchisq(G, 4);
cell_times_sim <- sample(seq(0,2*pi, 2*pi/(num_cells-1)), num_cells, replace=FALSE);
cycle_data <- sim_sinusoidal_cycle(G, amp_genes, phi_genes, sigma_genes, cell_times_sim);
dim(cycle_data)
celltime_levels <- 100;
out <- cell_reordering_phase(cycle_data, celltime_levels = 100, num_iter=100)
celltime_levels <- 100;
out <- cell_ordering_phase(cycle_data, celltime_levels = 100, num_iter=100)
out <- cell_ordering_class(cycle_data, celltime_levels = 100, num_iter=100)
install_github('kkdey/cellcycleR')
library(cellcycleR)
cycle_data <- sim_sinusoidal_cycle(G, amp_genes, phi_genes, sigma_genes, cell_times_sim);
dim(cycle_data)
celltime_levels <- 100;
out <- cell_ordering_class(cycle_data, celltime_levels = 100, num_iter=100)
library(parallel)
out <- cell_ordering_class(cycle_data, celltime_levels = 100, num_iter=100)
devtools::document()
library(cellcycleR)
library(wavethresh)
G <- 100;
num_cells <- 256;
amp_genes1 <- rep(10, G);
phi_genes1 <- rep(c(2,5), each=G/2);
sigma_genes1 <- rchisq(G, 4);
cell_times_sim <- sort(sample(seq(0,2*pi, 2*pi/(num_cells-1)), num_cells, replace=FALSE));
cycle_data <- t(sim_sinusoidal_cycle(G, amp_genes1, phi_genes1, sigma_genes1, cell_times_sim));
sample_reorder <- sample(1:num_cells,num_cells, replace=FALSE);
cycle_data_reorder <- cycle_data[,sample_reorder];
cycle_data <- cycle_data_reorder;
celltimes_choice <- seq(0, 2*pi, 2*pi/(celltime_levels-1));
cell_times_init <- sample(celltimes_choice, numcells, replace=TRUE);
cell_times_iter <- cell_times_init;
celltime_levels <- 128;
celltimes_choice <- seq(0, 2*pi, 2*pi/(celltime_levels-1));
cell_times_init <- sample(celltimes_choice, numcells, replace=TRUE);
cell_times_iter <- cell_times_init;
G <- dim(cycle_data)[2];
numcells <- dim(cycle_data)[1];
celltimes_choice <- seq(0, 2*pi, 2*pi/(celltime_levels-1));
cell_times_init <- sample(celltimes_choice, numcells, replace=TRUE);
cell_times_iter <- cell_times_init;
cell_times_iter
G <- 600;
num_cells <- 400;
amp_genes <- rep(10, G);
sigma_genes <- rchisq(G, 4);
cell_times_sim1<- sample(seq(pi/3,2*(pi/3), 2*pi/(num_cells/2-1)), num_cells/2, replace=TRUE);
cell_times_sim2<- sample(seq(5*(pi/3),6*(pi/3), 2*pi/(num_cells/2-1)), num_cells/2, replace=TRUE);
cell_times_sim3<- sample(seq(3*(pi/3),4*(pi/3), 2*pi/(num_cells/2-1)), num_cells/2, replace=TRUE);
cell_times_sim <- c(cell_times_sim1, cell_times_sim2, cell_times_sim3);
radial.plot(lengths=1:length(cell_times_sim),radial.pos=cell_times_sim,
line.col=colorRampPalette(brewer.pal(9,"Blues"))(length(cell_times_sim)), lwd=2)
#phi_genes <- c(runif(G/3, pi/4, 3*(pi/4)), runif(G/3, 5*(pi/4), 7*(pi/4)));
phi_genes <- c(runif(G/3, pi/3, 2*(pi/3)), runif(G/3, 3*(pi/3), 4*(pi/3)),
runif(G/3, 5*(pi/3), 2*pi));
source('cell_cycle_sim.R')
cycle_data <- sim_sinusoidal_cycle(G, amp_genes, phi_genes, sigma_genes, cell_times_sim);
library(cellcycleR)
library(wavethresh)
G <- 100;
num_cells <- 256;
amp_genes1 <- rep(10, G);
phi_genes1 <- rep(c(2,5), each=G/2);
sigma_genes1 <- rchisq(G, 4);
cell_times_sim <- sort(sample(seq(0,2*pi, 2*pi/(num_cells-1)), num_cells, replace=FALSE));
cycle_data <- sim_sinusoidal_cycle(G, amp_genes1, phi_genes1, sigma_genes1, cell_times_sim);
sample_reorder <- sample(1:num_cells,num_cells, replace=FALSE);
cycle_data_reorder <- cycle_data[,sample_reorder];
cycle_data <- cycle_data_reorder;
celltime_levels <- 128;
G <- dim(cycle_data)[2];
numcells <- dim(cycle_data)[1];
celltimes_choice <- seq(0, 2*pi, 2*pi/(celltime_levels-1));
cell_times_init <- sample(celltimes_choice, numcells, replace=TRUE);
cell_times_iter <- cell_times_init;
library(cellcycleR)
library(wavethresh)
G <- 100;
num_cells <- 256;
amp_genes1 <- rep(10, G);
phi_genes1 <- rep(c(2,5), each=G/2);
sigma_genes1 <- rchisq(G, 4);
cell_times_sim <- sort(sample(seq(0,2*pi, 2*pi/(num_cells-1)), num_cells, replace=FALSE));
cycle_data <- sim_sinusoidal_cycle(G, amp_genes1, phi_genes1, sigma_genes1, cell_times_sim);
sample_reorder <- sample(1:num_cells,num_cells, replace=FALSE);
cycle_data_reorder <- cycle_data[sample_reorder,];
cycle_data <- cycle_data_reorder;
celltime_levels <- 128;
G <- dim(cycle_data)[2];
numcells <- dim(cycle_data)[1];
celltimes_choice <- seq(0, 2*pi, 2*pi/(celltime_levels-1));
cell_times_init <- sample(celltimes_choice, numcells, replace=TRUE);
cell_times_iter <- cell_times_init;
cell_times_iter
length(unique(cell_times_iter))
length(celltimes_choice)
fit <- loess(cycle_data[g,] ~ cell_times_iter)$fitted
g <- 1
fit <- loess(cycle_data[g,] ~ cell_times_iter)$fitted
cell_times_iter
cycle_data[1,]
G <- 100;
num_cells <- 256;
amp_genes1 <- rep(10, G);
phi_genes1 <- rep(c(2,5), each=G/2);
sigma_genes1 <- rchisq(G, 4);
cell_times_sim <- sort(sample(seq(0,2*pi, 2*pi/(num_cells-1)), num_cells, replace=FALSE));
cycle_data <- sim_sinusoidal_cycle(G, amp_genes1, phi_genes1, sigma_genes1, cell_times_sim);
sample_reorder <- sample(1:num_cells,num_cells, replace=FALSE);
cycle_data_reorder <- cycle_data[sample_reorder,];
cycle_data <- cycle_data_reorder;
celltime_levels <- 128;
G <- dim(cycle_data)[2];
numcells <- dim(cycle_data)[1];
## Break the circle from 0 to 2pi into celltime_levels slices and assign each representative slice by the mean of the slice.
celltimes_choice <- seq(0, 2*pi, 2*pi/(celltime_levels-1));
## Initialize the cell times by sampling from the celltime_levels slices obtained above
cell_times_init <- sample(celltimes_choice, numcells, replace=TRUE);
cell_times_iter <- cell_times_init;
fit <- loess(cycle_data[g,] ~ cell_times_iter)$fitted
fit <- loess(cycle_data[,g] ~ cell_times_iter)$fitted
fit
fit <- smooth.spline(cell_times_iter, cycle_data[,g])$y
fit
fit <-  wr(threshold(wd(cycle_data[,g]), type="soft"));
fit
cell_times_iter
order(cell_times_iter)
cell_times_iter[order(cell_times_iter)]
sorted_cell_times <- sort(cell_times_iter);
ordered_vec <- cycle_data[order(cell_times_iter),g];
ordered_vec
sorted_cell_times
sorted_cell_times <- unique(sort(cell_times_iter));
sorted_cell_times
tapply(ordered_vec, sort(cell_times_iter), mean)
as.numeric(tapply(ordered_vec, sort(cell_times_iter), mean))
as.numeric(tapply(ordered_vec, factor(sort(cell_times_iter)), mean))
unique(sort(cell_times_iter))
ordered_vec <- as.numeric(tapply(cycle_data[order(cell_times_iter),g], factor(sort(cell_times_iter)), mean));
ordered_vec_out <- approx(sort(cell_times_iter), ordered_vec, xout = seq(0, 2*pi, 2*pi/(celltime_levels-1)), ties = "ordered")$y
ordered_vec
sort(cell_times_iter)
ordered_vec_out <- approx(unique(sort(cell_times_iter)), ordered_vec, xout = seq(0, 2*pi, 2*pi/(celltime_levels-1)), ties = "ordered")$y
ordered_vec_out
fit <-  wr(threshold(wd(ordered_vec_out), type="soft"));
fit
lmfit_list <- parallel::mclapply(1:G, function(g)
{
fit <- lm(cycle_data[,g]  ~ sin(cell_times_iter) + cos(cell_times_iter) -1);
out_sigma <- sd(fit$residuals);
beta1 <- fit$coefficients[1];
beta2 <- fit$coefficients[2];
if(beta1==0 & beta2==0){
stop(paste0("You have a gene with all 0 counts at gene",g));
}
out_amp <- sqrt(beta1^2 + beta2^2);
out_phi <- atan3(as.numeric(beta2), as.numeric(beta1));
ll <- list("out_amp"=out_amp, "out_phi"=out_phi, "out_sigma"=out_sigma)
return(ll)
}, mc.cores=detectCores())
lmfit_list <- parallel::mclapply(1:G, function(g)
{
fit <- lm(cycle_data[,g]  ~ sin(cell_times_iter) + cos(cell_times_iter) -1);
out_sigma <- sd(fit$residuals);
beta1 <- fit$coefficients[1];
beta2 <- fit$coefficients[2];
if(beta1==0 & beta2==0){
stop(paste0("You have a gene with all 0 counts at gene",g));
}
out_amp <- sqrt(beta1^2 + beta2^2);
out_phi <- atan3(as.numeric(beta2), as.numeric(beta1));
ll <- list("out_amp"=out_amp, "out_phi"=out_phi, "out_sigma"=out_sigma)
return(ll)
}, mc.cores=parallel::detectCores())
amp <- as.numeric(unlist(lapply(1:length(lmfit_list), function(n) return(lmfit_list[[n]]$out_amp))));
phi <- as.numeric(unlist(lapply(1:length(lmfit_list), function(n) return(lmfit_list[[n]]$out_phi))));
sigma <- as.numeric(unlist(lapply(1:length(lmfit_list), function(n) return(lmfit_list[[n]]$out_sigma))));
phi
cell_times_class <- seq(0, 2*pi, 2*pi/(celltime_levels-1));
num_celltime_class <- length(cell_times_class);
sin_class_times <- sin(cell_times_class);
cos_class_times <- cos(cell_times_class);
sin_phi_genes <- sin(phi);
cos_phi_genes <- cos(phi);
sinu_signal <- cbind(sin_class_times, cos_class_times) %*% rbind(amp*cos_phi_genes, amp*sin_phi_genes);
dim(sinu_signal)
method="LOESS"
npfit_list <- parallel::mclapply(1:G, function(g)
{
if(method=="LOESS"){
fit <- loess(cycle_data[,g] ~ cell_times_iter)$fitted
}
if(method=="B-spline"){
fit <- smooth.spline(cell_times_iter, cycle_data[,g])$y
}
if(method=="Wavelet"){
ordered_vec <- as.numeric(tapply(cycle_data[order(cell_times_iter),g], factor(sort(cell_times_iter)), mean));
ordered_vec_out <- approx(unique(sort(cell_times_iter)), ordered_vec, xout = seq(0, 2*pi, 2*pi/(celltime_levels-1)), ties = "ordered")$y
fit <-  wr(threshold(wd(ordered_vec_out), type="soft"));
}
return(fit)
}
npfit_list <- parallel::mclapply(1:G, function(g)
{
if(method=="LOESS"){
fit <- loess(cycle_data[,g] ~ cell_times_iter)$fitted
}
if(method=="B-spline"){
fit <- smooth.spline(cell_times_iter, cycle_data[,g])$y
}
if(method=="Wavelet"){
ordered_vec <- as.numeric(tapply(cycle_data[order(cell_times_iter),g], factor(sort(cell_times_iter)), mean));
ordered_vec_out <- approx(unique(sort(cell_times_iter)), ordered_vec, xout = seq(0, 2*pi, 2*pi/(celltime_levels-1)), ties = "ordered")$y
fit <-  wr(threshold(wd(ordered_vec_out), type="soft"));
}
return(fit)
}, mc.cores=parallel::detectCores())
npfit_list
cell_times_class <- seq(0, 2*pi, 2*pi/(celltime_levels-1));
npfit_list <- parallel::mclapply(1:G, function(g)
{
if(method=="LOESS"){
ordered_vec <- as.numeric(tapply(cycle_data[order(cell_times_iter),g], factor(sort(cell_times_iter)), mean));
ordered_vec_out <- approx(unique(sort(cell_times_iter)), ordered_vec, xout = cell_times_class, ties = "ordered")$y
fit <- loess(ordered_vec_out ~ cell_times_class)$fitted
}
if(method=="B-spline"){
ordered_vec <- as.numeric(tapply(cycle_data[order(cell_times_iter),g], factor(sort(cell_times_iter)), mean));
ordered_vec_out <- approx(unique(sort(cell_times_iter)), ordered_vec, xout = cell_times_class, ties = "ordered")$y
fit <- smooth.spline(cell_times_class, ordered_vec_out)$y
}
if(method=="Wavelet"){
ordered_vec <- as.numeric(tapply(cycle_data[order(cell_times_iter),g], factor(sort(cell_times_iter)), mean));
ordered_vec_out <- approx(unique(sort(cell_times_iter)), ordered_vec, xout = cell_times_class, ties = "ordered")$y
fit <-  wr(threshold(wd(ordered_vec_out), type="soft"));
}
return(fit)
}, mc.cores=parallel::detectCores())
method
npfit_list
npfit_list <- do.call(cbind, parallel::mclapply(1:G, function(g)
{
if(method=="LOESS"){
ordered_vec <- as.numeric(tapply(cycle_data[order(cell_times_iter),g], factor(sort(cell_times_iter)), mean));
ordered_vec_out <- approx(unique(sort(cell_times_iter)), ordered_vec, xout = cell_times_class, ties = "ordered")$y
fit <- loess(ordered_vec_out ~ cell_times_class)$fitted
}
if(method=="B-spline"){
ordered_vec <- as.numeric(tapply(cycle_data[order(cell_times_iter),g], factor(sort(cell_times_iter)), mean));
ordered_vec_out <- approx(unique(sort(cell_times_iter)), ordered_vec, xout = cell_times_class, ties = "ordered")$y
fit <- smooth.spline(cell_times_class, ordered_vec_out)$y
}
if(method=="Wavelet"){
ordered_vec <- as.numeric(tapply(cycle_data[order(cell_times_iter),g], factor(sort(cell_times_iter)), mean));
ordered_vec_out <- approx(unique(sort(cell_times_iter)), ordered_vec, xout = cell_times_class, ties = "ordered")$y
fit <-  wr(threshold(wd(ordered_vec_out), type="soft"));
}
return(fit)
}, mc.cores=parallel::detectCores()))
npfit_list
dim(npfit_list)
npfit <- do.call(cbind, parallel::mclapply(1:G, function(g)
{
if(method=="LOESS"){
ordered_vec <- as.numeric(tapply(cycle_data[order(cell_times_iter),g], factor(sort(cell_times_iter)), mean));
ordered_vec_out <- approx(unique(sort(cell_times_iter)), ordered_vec, xout = cell_times_class, ties = "ordered")$y
fit <- loess(ordered_vec_out ~ cell_times_class)$fitted
}
if(method=="B-spline"){
ordered_vec <- as.numeric(tapply(cycle_data[order(cell_times_iter),g], factor(sort(cell_times_iter)), mean));
ordered_vec_out <- approx(unique(sort(cell_times_iter)), ordered_vec, xout = cell_times_class, ties = "ordered")$y
fit <- smooth.spline(cell_times_class, ordered_vec_out)$y
}
if(method=="Wavelet"){
ordered_vec <- as.numeric(tapply(cycle_data[order(cell_times_iter),g], factor(sort(cell_times_iter)), mean));
ordered_vec_out <- approx(unique(sort(cell_times_iter)), ordered_vec, xout = cell_times_class, ties = "ordered")$y
fit <-  wr(threshold(wd(ordered_vec_out), type="soft"));
}
return(fit)
}, mc.cores=parallel::detectCores()))
cell <- 1
res_error <- sweep(sinu_signal,2,cycle_data[cell,]);
res_error
dim(res_error)
dim(cycle_data)
dim(sinu_signal)
sweep(c(2,3),2, rbind(c(4,5),c(0,4)))
sweep(as.matrix(c(2,3)),2, rbind(c(4,5),c(0,4)))
dim(sinu_signal)
sweep(rbind(c(2,3),c(0,7)),2, rbind(c(4,5),c(0,4)))
sweep(rbind(c(2,3),c(0,7)),2, rbind(c(4,5)))
options(digits=12)
signal_intensity_per_class <- matrix(0, numcells, celltime_levels)
signal_intensity_per_class <- do.call(rbind,mclapply(1:numcells, function(cell)
{
res_error <- sweep(np_signal,2,cycle_data[cell,]);
res_error_adjusted <- -(res_error^2);
res_error_adjusted <- sweep(res_error_adjusted, 2, 2*sigma^2, '/');
out <- rowSums(sweep(res_error_adjusted,2,log(sigma)) - 0.5*log(2*pi));
return(out)
}, mc.cores=detectCores()));
signal_intensity_class_exp <- do.call(rbind,lapply(1:dim(signal_intensity_per_class)[1], function(x)
{
out <- exp(signal_intensity_per_class[x,]- max(signal_intensity_per_class[x,]));
return(out)
}));
signal_intensity_per_class <- do.call(rbind,parallel::mclapply(1:numcells, function(cell)
{
res_error <- sweep(np_signal,2,cycle_data[cell,]);
res_error_adjusted <- -(res_error^2);
res_error_adjusted <- sweep(res_error_adjusted, 2, 2*sigma^2, '/');
out <- rowSums(sweep(res_error_adjusted,2,log(sigma)) - 0.5*log(2*pi));
return(out)
}, mc.cores=parallel::detectCores()));
np_signal <- do.call(cbind, parallel::mclapply(1:G, function(g)
{
if(method=="LOESS"){
ordered_vec <- as.numeric(tapply(cycle_data[order(cell_times_iter),g], factor(sort(cell_times_iter)), mean));
ordered_vec_out <- approx(unique(sort(cell_times_iter)), ordered_vec, xout = cell_times_class, ties = "ordered")$y
fit <- loess(ordered_vec_out ~ cell_times_class)$fitted
}
if(method=="B-spline"){
ordered_vec <- as.numeric(tapply(cycle_data[order(cell_times_iter),g], factor(sort(cell_times_iter)), mean));
ordered_vec_out <- approx(unique(sort(cell_times_iter)), ordered_vec, xout = cell_times_class, ties = "ordered")$y
fit <- smooth.spline(cell_times_class, ordered_vec_out)$y
}
if(method=="Wavelet"){
ordered_vec <- as.numeric(tapply(cycle_data[order(cell_times_iter),g], factor(sort(cell_times_iter)), mean));
ordered_vec_out <- approx(unique(sort(cell_times_iter)), ordered_vec, xout = cell_times_class, ties = "ordered")$y
fit <-  wr(threshold(wd(ordered_vec_out), type="soft"));
}
return(fit)
}, mc.cores=parallel::detectCores()))
options(digits=12)
signal_intensity_per_class <- matrix(0, numcells, celltime_levels)
signal_intensity_per_class <- do.call(rbind,parallel::mclapply(1:numcells, function(cell)
{
res_error <- sweep(np_signal,2,cycle_data[cell,]);
res_error_adjusted <- -(res_error^2);
res_error_adjusted <- sweep(res_error_adjusted, 2, 2*sigma^2, '/');
out <- rowSums(sweep(res_error_adjusted,2,log(sigma)) - 0.5*log(2*pi));
return(out)
}, mc.cores=parallel::detectCores()));
dim(signal_intensity_per_class)
signal_intensity_class_exp <- do.call(rbind,lapply(1:dim(signal_intensity_per_class)[1], function(x)
{
out <- exp(signal_intensity_per_class[x,]- max(signal_intensity_per_class[x,]));
return(out)
}));
dim(signal_intensity_class_exp)
rowSums(signal_intensity_class_exp)
colSums(signal_intensity_class_exp)
dim(signal_intensity_class_exp)[1]
x <- 1
temp <- signal_intensity_class_exp[x,];
length(unique(signal_intensity_class_exp[x,]))
signal_intensity_class_exp[1,]
rmultinom(1,1,signal_intensity_class_exp[x,])
rmultinom(1,1,signal_intensity_class_exp[x,])
rmultinom(1,1,signal_intensity_class_exp[x,])
cell_times <- cell_times_class[unlist(lapply(1:dim(signal_intensity_class_exp)[1], function(x)
{
temp <- signal_intensity_class_exp[x,];
if(length(unique(signal_intensity_class_exp[x,]))==1)
out <- sample(1:dim(signal_intensity_class_exp)[2],1)
else
out <- which(rmultinom(1,1,signal_intensity_class_exp[x,])==1);
return(out)
}))];
cell_times
cell_times <- cell_times_class[unlist(lapply(1:dim(signal_intensity_class_exp)[1], function(x)
{
temp <- signal_intensity_class_exp[x,];
if(length(unique(signal_intensity_class_exp[x,]))==1)
out <- sample(1:dim(signal_intensity_class_exp)[2],1)
else
out <- which(rmultinom(1,1,signal_intensity_class_exp[x,])==1);
return(out)
}))];
cell_times
devtools::document()
